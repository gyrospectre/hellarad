AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Security alert enrichment!

Globals:
  Function:
    Timeout: 10

Resources:
  ConductorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Conductor'
      CodeUri: conductor
      Handler: conductor
      Runtime: go1.x
      Role: !GetAtt ConductorRole.Arn
      Environment:
        Variables:
          STACK_NAME: !Sub '${AWS::StackName}'

  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-Alert'
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt ConductorFunction.Arn

  ConductorInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ConductorFunction
      Principal: sns.amazonaws.com

  GreynoiseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Greynoise'
      CodeUri: function/greynoise
      Handler: greynoise
      Runtime: go1.x

  IPAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-IPapi'
      CodeUri: function/ipapi
      Handler: ipapi
      Runtime: go1.x

  CrowdStrikeFalconFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CrowdStrikeFalcon'
      CodeUri: function/crowdstrikefalcon
      Handler: crowdstrikefalcon
      Runtime: go1.x

  OutputFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-Output'
      CodeUri: output/opsgenie
      Handler: jira
      Runtime: go1.x
      Role: !GetAtt OutputRole.Arn

  EnrichStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub '${AWS::StackName}-Enrich'
      DefinitionUri: statemachine/enrich.asl.json
      DefinitionSubstitutions:
        GreynoiseFunctionArn: !GetAtt GreynoiseFunction.Arn
        IPAPIFunctionArn: !GetAtt IPAPIFunction.Arn
        OutputFunctionArn: !GetAtt OutputFunction.Arn
        CrowdStrikeFalconFunctionArn: !GetAtt CrowdStrikeFalconFunction.Arn

      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GreynoiseFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CrowdStrikeFalconFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref IPAPIFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref OutputFunction

  ConductorRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub '${AWS::StackName}-ConductorRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
        - 
          PolicyName: !Sub '${AWS::StackName}-ConductorPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${AWS::StackName}-*'
              - Effect: Allow
                Action:
                  - cloudformation:ListStackResources
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-*'

  OutputRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Sub '${AWS::StackName}-OutputRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
        - 
          PolicyName: !Sub '${AWS::StackName}-OutputPolicy'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:JiraApi-*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OpsGenieAPI-*'
